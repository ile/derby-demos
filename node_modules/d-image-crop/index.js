// Generated by CoffeeScript 1.7.1
(function() {
  var ImageCrop,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  module.exports = ImageCrop = (function() {
    var crop, instance;

    function ImageCrop() {
      this.startCrop = __bind(this.startCrop, this);
    }

    crop = void 0;

    instance = void 0;

    ImageCrop.prototype.view = __dirname;

    ImageCrop.prototype.name = 'd-image-crop';

    ImageCrop.prototype.startCrop = function(val) {
      if (val) {
        return instance = new crop(this.cropper, this.dragger, {
          minSize: [170, 170],
          coords: [[0, 0], [170, 170]],
          zoom: this.zoom,
          positionField: this.position,
          sizeField: this.size
        });
      }
    };

    ImageCrop.prototype.create = function() {
      crop = require('./crop')();
      this.model.on('change', 'src', this.startCrop);
      return this.startCrop(this.model.get('src'));
    };

    ImageCrop.prototype.t = function(s) {
      var t;
      t = this.model.get('translate');
      if (typeof t === 'string') {
        return this.app.proto[t].call(this.app, s);
      } else {
        return s;
      }
    };

    ImageCrop.prototype.cancel = function(e) {
      e.preventDefault();
      return this.model.del('src');
    };

    ImageCrop.prototype.ok = function(e) {
      if (instance.changed) {
        this.submit(e);
      }
      return this.model.del('src');
    };

    ImageCrop.prototype.submit = function(e) {
      var data, position, size, _ref, _ref1, _ref2, _ref3;
      if (((_ref = this.form.elements) != null ? (_ref1 = _ref.size) != null ? _ref1.value : void 0 : void 0) && ((_ref2 = this.form.elements) != null ? (_ref3 = _ref2.position) != null ? _ref3.value : void 0 : void 0)) {
        size = this.form.elements.size.value.split(',').map(Number);
        position = this.form.elements.position.value.split(',').map(function(i) {
          return -parseInt(i, 10);
        });
        data = {
          size: size,
          position: position
        };
        this.emit('submit', e, data);
        return true;
      }
    };

    return ImageCrop;

  })();

}).call(this);
